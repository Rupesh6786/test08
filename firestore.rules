
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      return request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
    }

    match /users/{userId} {
      allow read: if true;
      allow create, update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId || isAdmin();
    }
    
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /registrations/{registrationId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }

    match /inquiries/{inquiryId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    match /communities/{communityId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
      allow update: if request.auth != null; // Allows logged-in users to join/leave. Client must be trusted to send correct atomic updates.
      allow delete: if request.auth.uid == resource.data.creatorId || isAdmin();

      // Rules for the 'messages' subcollection
      match /messages/{messageId} {
        // Allow read if user is a member of the community
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.memberIds;
        // Allow create if user is a member and is the author of the message
        allow create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.memberIds
                      && request.resource.data.userId == request.auth.uid;
        // Nobody can update or delete messages
        allow update, delete: if false;
      }
    }
  }
}
