
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Public read, only self-write
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452'; // Admin can delete
    }

    // Tournaments: Public read, admin-only write
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
    }

    // Registrations: Users can create for themselves. User can read their own. Admin can read all and update.
    match /registrations/{registrationId} {
      allow read: if request.auth.uid == resource.data.userId || request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
      allow delete: if request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
    }

    // Inquiries: Anyone can create, only admin can read/write.
    match /inquiries/{inquiryId} {
      allow read, write: if request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
      allow create: if true;
    }

    // Communities: Public read, authenticated users can create.
    match /communities/{communityId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
      allow update, delete: if request.auth.uid == resource.data.creatorId || request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
    }
  }
}
