
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Check if the currently authenticated user is the designated admin.
    function isAdmin() {
      return request.auth.uid == 'ymwd0rW1wnNZkYlUR7cUi9dkd452';
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Anyone can read a user's profile.
      allow read: if true;
      // Only the user themselves can create or update their own profile.
      allow create, update: if request.auth.uid == userId;
      // Only the user or an admin can delete a profile.
      allow delete: if request.auth.uid == userId || isAdmin();
    }
    
    // Rules for the 'tournaments' collection.
    match /tournaments/{tournamentId} {
      // Anyone can read tournament data.
      allow read: if true;
      // Only admins can create, update, or delete tournaments.
      allow write: if isAdmin();
    }

    // Rules for the 'registrations' collection.
    match /registrations/{registrationId} {
      // A user can read their own registration, or an admin can read any registration.
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      // A user can only create a registration for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Only an admin can update (e.g., confirm payment) or delete a registration.
      allow update, delete: if isAdmin();
    }

    // Rules for the 'inquiries' collection.
    match /inquiries/{inquiryId} {
      // Anyone can submit an inquiry (create).
      allow create: if true;
      // Only an admin can read, update, or delete inquiries.
      allow read, update, delete: if isAdmin();
    }

    // Rules for the 'communities' collection.
    match /communities/{communityId} {
      // Anyone can read community data.
      allow read: if true;
      // An authenticated user can create a community.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
      
      // Allow updates for joining/leaving, or by creator/admin
      allow update: if (request.auth.uid == resource.data.creatorId || isAdmin()) || 
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'members']) && request.auth != null);
      
      // Only creator or admin can delete.
      allow delete: if request.auth.uid == resource.data.creatorId || isAdmin();

      // Rules for the 'messages' subcollection within a community.
      match /messages/{messageId} {
        // A user must be a member of the community to read or send messages.
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.memberIds;
        // Only an admin can update or delete messages.
        allow update, delete: if isAdmin();
      }
    }
  }
}
